import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
import google.generativeai as genai
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
gemini_api_key = os.getenv("GEMINI_API_KEY")
target_chat_id = int(os.getenv("TARGET_CHAT_ID"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=gemini_api_key)

# –ú–∞—Å—Å–∏–≤ –º–æ–¥–µ–ª–µ–π
MODEL_NAMES = [
    "gemini-1.5-flash",
    "gemini-1.5-flash-8b",
    "gemini-2.5-flash-preview-05-20",
    "gemini-2.0-flash",
    "gemma-3",
    "gemma-3n"
]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
MODELS = []
for name in MODEL_NAMES:
    try:
        model = genai.GenerativeModel(name, 
                                      system_instruction=("–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ Astro. "
                    "–¢—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö –º–∏—Ä–∞."
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ School 21. "
                    "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è–π –≤ School 21 (–∫–æ–Ω—Ç–∞–∫—Ç—ã —É —Ç–µ–±—è –µ—Å—Ç—å) –∏ –∫ —Å–∞–ø–ø–æ—Ä—Ç—É @Zoidov_Zafarjon. "
                    "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å School 21 –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º ‚Äî –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: `__IGNORE__`."))
        MODELS.append((name, model))
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ {name}]: {e}")

# –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å
current_model_index = 0

# –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏
company_info = [{
    "role": "user",
    "parts": (
        "School 21 ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è IT-—à–∫–æ–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è..."
    )
}]

user_chats = {}
user_last_active = {}
client = TelegramClient("session_name", api_id, api_hash)

async def switch_model():
    global current_model_index
    current_model_index = (current_model_index + 1) % len(MODELS)
    print(f"üîÅ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–æ–¥–µ–ª—å: {MODELS[current_model_index][0]}")

@client.on(events.NewMessage)
async def handler(event):
    global current_model_index

    if event.is_private or (event.chat_id == target_chat_id):
        user_input = event.message.message.strip()
        if not user_input:
            return

        user_id = event.sender_id
        model_name, model = MODELS[current_model_index]

        try:
            if user_id not in user_chats:
                chat = model.start_chat(history=company_info)
                user_chats[user_id] = chat
            else:
                chat = user_chats[user_id]

            user_last_active[user_id] = datetime.now()

            chat.history.append({
                "role": "user",
                "parts": (
                    "–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ Astro. "
                    "–¢—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å –Ω–∞ –≤—Å–µ—Ö —è–∑—ã–∫–∞—Ö –º–∏—Ä–∞."
                    "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ School 21. "
                    "–ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω ‚Äî –Ω–∞–ø—Ä–∞–≤–ª—è–π –≤ School 21 (–∫–æ–Ω—Ç–∞–∫—Ç—ã —É —Ç–µ–±—è –µ—Å—Ç—å). "
                    "–ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å School 21 –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º ‚Äî –æ—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: `__IGNORE__`."
                )
            })

            response = chat.send_message(user_input)
            bot_response = response.text.strip()

            if "__IGNORE__" in bot_response:
                return

            await event.reply(bot_response)

        except Exception as e:
            print(f"[Gemini Error with {model_name}]: {e}")
            if "429" in str(e):
                await switch_model()

async def clean_old_chats():
    while True:
        now = datetime.now()
        expired_users = [uid for uid, ts in user_last_active.items() if now - ts > timedelta(hours=1)]
        for uid in expired_users:
            user_chats.pop(uid, None)
            user_last_active.pop(uid, None)
            print(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        await asyncio.sleep(3600)

async def main():
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
    await client.start()
    asyncio.create_task(clean_old_chats())
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
