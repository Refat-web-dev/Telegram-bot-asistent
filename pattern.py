import os
import time
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient, events
import google.generativeai as genai
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
api_id = int(os.getenv("API_ID"))
api_hash = os.getenv("API_HASH")
gemini_api_key = os.getenv("GEMINI_API_KEY")
target_chat_id = int(os.getenv("TARGET_CHAT_ID"))  # ID –≥—Ä—É–ø–ø—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
genai.configure(api_key=gemini_api_key)
model = genai.GenerativeModel(
    "gemini-1.5-flash",
    system_instruction=("–¢—ã ‚Äî —á–∞—Ç-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ Astro. –¢—ã –≤–µ–∂–ª–∏–≤—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è IT-—à–∫–æ–ª–æ–π School 21. –û—Ç–≤–µ—á–∞–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∫–æ–ª–µ. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ School 21 (–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–Ω—Ç–∞–∫—Ç—ã). –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –Ω–∏–∫–∞–∫ –Ω–µ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ School 21 ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π —Å—Ç—Ä–æ–≥–æ —Ñ—Ä–∞–∑—É: `–í–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞`. –ù–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–≤–µ—á–∞–π. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è ‚Äî –ª—é–¥–∏, –∂–µ–ª–∞—é—â–∏–µ –ø–æ—Å—Ç—É–ø–∏—Ç—å –≤ School 21.")
)

company_info = [
# ABOUT
  {"role": "user", "parts": "School 21 ‚Äî —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è IT-—à–∫–æ–ª–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç —Å–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é, –Ω–∞–π—Ç–∏ —Å–µ–±—è –≤ –ò–¢ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–≤—ã–∫–∏. –û–±—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É ¬´—Ä–∞–≤–Ω—ã–π –æ–±—É—á–∞–µ—Ç —Ä–∞–≤–Ω–æ–≥–æ¬ª ‚Äî –±–µ–∑ –ª–µ–∫—Ü–∏–π, –º–µ–Ω—Ç–æ—Ä–æ–≤ –∏ –æ—Ü–µ–Ω–æ–∫. –í—ã —É—á–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç–µ —Å–æ—Ñ—Ç- –∏ —Ö–∞—Ä–¥-—Å–∫–∏–ª–ª—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ —Å—Ç—Ä–æ–∏—Ç–µ —Å–≤–æ—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é —Å–∞–º–∏. –®–∫–æ–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7, –º–æ–∂–Ω–æ —Å–æ–≤–º–µ—â–∞—Ç—å —Å —Ä–∞–±–æ—Ç–æ–π –∏–ª–∏ —É—á—ë–±–æ–π –≤ –≤—É–∑–µ. –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, –∞–∫—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —É–∂–µ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è ‚Äî –∏ –≤—Å—ë —ç—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ."},
# CONTACTS
  {"role": "user", "parts": "–ù–∞ —Å–≤—è–∑–∏ –≤ –±—É–¥–Ω–∏ —Å 10:00 –¥–æ 19:00."},
  {"role": "user", "parts": "–¢–∞—à–∫–µ–Ω—Ç, —É–ª. –ó–∏—ë–ª–∏–ª–∞—Ä, 13. (https://yandex.uz/maps/10335/tashkent/house/YkAYdQRlQEUPQFprfX9yeXhnZQ==/?ll=69.334606%2C41.338502&z=17) –û—Ä–∏–µ–Ω—Ç–∏—Ä –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ò–Ω—Ö–∞, +998 93 039 4447, tashkent@21-school.uz."},
  {"role": "user", "parts": "–°–∞–º–∞—Ä–∫–∞–Ω–¥, —É–ª.–ò–±–Ω –°–∏–Ω–æ, 17a (https://yandex.ru/maps/org/30165667494), +998930394442,  samarkand@21-school.uz."},
  {"role": "user", "parts": "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ 21-school.uz (https://21-school.uz/ru/?utm_source=tg&utm_medium=social-organic)."},
]
# –•—Ä–∞–Ω–∏–º —á–∞—Ç—ã –∏ –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
user_chats = {}           # user_id: chat
user_last_active = {}     # user_id: datetime

# –ö–ª–∏–µ–Ω—Ç Telethon
client = TelegramClient("session_name", api_id, api_hash)

@client.on(events.NewMessage)
async def handler(event):
    if event.is_private or (event.chat_id == target_chat_id):
        user_input = event.message.message.strip()

        # ‚õî –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not user_input:
            return

        user_id = event.sender_id

        if user_id not in user_chats:
            chat = model.start_chat(history=company_info)
            user_chats[user_id] = chat
        else:
            chat = user_chats[user_id]

        user_last_active[user_id] = datetime.now()

        try:
            response = chat.send_message(user_input)
            bot_response = response.text.strip()
        except Exception as e:
            print(f"[Gemini Error]: {e}")
            return

        if bot_response != "–í–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞":
            await event.reply(bot_response)


# üïí –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —á–∞—Ç–æ–≤
async def clean_old_chats():
    while True:
        now = datetime.now()
        expired_users = [uid for uid, ts in user_last_active.items() if now - ts > timedelta(hours=1)]

        for uid in expired_users:
            user_chats.pop(uid, None)
            user_last_active.pop(uid, None)
            print(f"‚ùå –£–¥–∞–ª–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–µ—Å—Å–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    print("–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
    await client.start()
    asyncio.create_task(clean_old_chats())
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
